{"ast":null,"code":"import validator from 'validator';\nimport isEmpty from '../utils/isEmpty';\nexport const validateRegisterInput = data => {\n  let errors = {};\n  data.password = !isEmpty(data.password) ? data.password : '';\n  data.password2 = !isEmpty(data.password2) ? data.password2 : '';\n  data.email = !isEmpty(data.email) ? data.email : '';\n\n  if (validator.isEmpty(data.email)) {\n    errors.email = 'Email field is required.';\n  }\n\n  if (!validator.isEmail(data.email)) {\n    errors.email = 'Email is invalid.';\n  }\n\n  if (validator.isEmpty(data.password)) {\n    errors.password = 'Password field is required.';\n  }\n\n  if (!validator.isLength(data.password, {\n    min: 6,\n    max: 30\n  })) {\n    errors.password = 'Password must be between 6 and 30 characters';\n  }\n\n  if (validator.isEmpty(data.password2)) {\n    errors.password2 = 'Confirm password field is required.';\n  }\n\n  if (!validator.equals(data.password, data.password2)) {\n    errors.password2 = 'Passwords must match.';\n  }\n\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};","map":{"version":3,"sources":["/Users/alecdown/apps/squad/client/src/validation/authValidation.js"],"names":["validator","isEmpty","validateRegisterInput","data","errors","password","password2","email","isEmail","isLength","min","max","equals","isValid"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAO,MAAMC,qBAAqB,GAAGC,IAAI,IAAI;AAC3C,MAAIC,MAAM,GAAG,EAAb;AAEAD,EAAAA,IAAI,CAACE,QAAL,GAAgB,CAACJ,OAAO,CAACE,IAAI,CAACE,QAAN,CAAR,GAA0BF,IAAI,CAACE,QAA/B,GAA0C,EAA1D;AACAF,EAAAA,IAAI,CAACG,SAAL,GAAiB,CAACL,OAAO,CAACE,IAAI,CAACG,SAAN,CAAR,GAA2BH,IAAI,CAACG,SAAhC,GAA4C,EAA7D;AACAH,EAAAA,IAAI,CAACI,KAAL,GAAa,CAACN,OAAO,CAACE,IAAI,CAACI,KAAN,CAAR,GAAuBJ,IAAI,CAACI,KAA5B,GAAoC,EAAjD;;AAEA,MAAIP,SAAS,CAACC,OAAV,CAAkBE,IAAI,CAACI,KAAvB,CAAJ,EAAmC;AACjCH,IAAAA,MAAM,CAACG,KAAP,GAAe,0BAAf;AACD;;AAED,MAAI,CAACP,SAAS,CAACQ,OAAV,CAAkBL,IAAI,CAACI,KAAvB,CAAL,EAAoC;AAClCH,IAAAA,MAAM,CAACG,KAAP,GAAe,mBAAf;AACD;;AAED,MAAIP,SAAS,CAACC,OAAV,CAAkBE,IAAI,CAACE,QAAvB,CAAJ,EAAsC;AACpCD,IAAAA,MAAM,CAACC,QAAP,GAAkB,6BAAlB;AACD;;AAED,MAAI,CAACL,SAAS,CAACS,QAAV,CAAmBN,IAAI,CAACE,QAAxB,EAAkC;AAAEK,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAAlC,CAAL,EAA6D;AAC3DP,IAAAA,MAAM,CAACC,QAAP,GAAkB,8CAAlB;AACD;;AAED,MAAIL,SAAS,CAACC,OAAV,CAAkBE,IAAI,CAACG,SAAvB,CAAJ,EAAuC;AACrCF,IAAAA,MAAM,CAACE,SAAP,GAAmB,qCAAnB;AACD;;AAED,MAAI,CAACN,SAAS,CAACY,MAAV,CAAiBT,IAAI,CAACE,QAAtB,EAAgCF,IAAI,CAACG,SAArC,CAAL,EAAsD;AACpDF,IAAAA,MAAM,CAACE,SAAP,GAAmB,uBAAnB;AACD;;AAED,SAAO;AACLF,IAAAA,MADK;AAELS,IAAAA,OAAO,EAAEZ,OAAO,CAACG,MAAD;AAFX,GAAP;AAID,CAnCM","sourcesContent":["import validator from 'validator';\nimport isEmpty from '../utils/isEmpty';\n\nexport const validateRegisterInput = data => {\n  let errors = {};\n\n  data.password = !isEmpty(data.password) ? data.password : '';\n  data.password2 = !isEmpty(data.password2) ? data.password2 : '';\n  data.email = !isEmpty(data.email) ? data.email : '';\n\n  if (validator.isEmpty(data.email)) {\n    errors.email = 'Email field is required.';\n  }\n\n  if (!validator.isEmail(data.email)) {\n    errors.email = 'Email is invalid.';\n  }\n\n  if (validator.isEmpty(data.password)) {\n    errors.password = 'Password field is required.';\n  }\n\n  if (!validator.isLength(data.password, { min: 6, max: 30 })) {\n    errors.password = 'Password must be between 6 and 30 characters';\n  }\n\n  if (validator.isEmpty(data.password2)) {\n    errors.password2 = 'Confirm password field is required.';\n  }\n\n  if (!validator.equals(data.password, data.password2)) {\n    errors.password2 = 'Passwords must match.';\n  }\n\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n"]},"metadata":{},"sourceType":"module"}