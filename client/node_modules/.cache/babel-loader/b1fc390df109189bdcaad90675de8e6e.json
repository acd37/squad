{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { SET_CURRENT_USER } from './types';\nexport const loginUser = userData => {\n  console.log(userData);\n  axios.post('/api/auth/login', userData).then(res => {\n    // save token to localStorage\n    const token = res.data.token; // localStorage.setItem(\"peachflame2\", token);\n    // set token to auth header\n    // setAuthToken(token);\n    // decode token to get user data\n\n    const decoded = jwtDecode(token); // set current user\n\n    dispatch(setCurrentUser(decoded));\n  });\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["/Users/alecdown/apps/squad/client/src/actions/authActions.js"],"names":["axios","jwtDecode","SET_CURRENT_USER","loginUser","userData","console","log","post","then","res","token","data","decoded","dispatch","setCurrentUser","type","payload"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,gBAAT,QAAiC,SAAjC;AAEA,OAAO,MAAMC,SAAS,GAAGC,QAAQ,IAAI;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAJ,EAAAA,KAAK,CAACO,IAAN,CAAW,iBAAX,EAA8BH,QAA9B,EAAwCI,IAAxC,CAA6CC,GAAG,IAAI;AAClD;AADkD,UAE1CC,KAF0C,GAEhCD,GAAG,CAACE,IAF4B,CAE1CD,KAF0C,EAGlD;AAEA;AACA;AAEA;;AACA,UAAME,OAAO,GAAGX,SAAS,CAACS,KAAD,CAAzB,CATkD,CAWlD;;AACAG,IAAAA,QAAQ,CAACC,cAAc,CAACF,OAAD,CAAf,CAAR;AACD,GAbD;AAcD,CAjBM,C,CAmBP;;AACA,OAAO,MAAME,cAAc,GAAGF,OAAO,IAAI;AACvC,SAAO;AACLG,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\n\nimport { SET_CURRENT_USER } from './types';\n\nexport const loginUser = userData => {\n  console.log(userData);\n\n  axios.post('/api/auth/login', userData).then(res => {\n    // save token to localStorage\n    const { token } = res.data;\n    // localStorage.setItem(\"peachflame2\", token);\n\n    // set token to auth header\n    // setAuthToken(token);\n\n    // decode token to get user data\n    const decoded = jwtDecode(token);\n\n    // set current user\n    dispatch(setCurrentUser(decoded));\n  });\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n"]},"metadata":{},"sourceType":"module"}