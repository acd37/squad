{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS, SET_USER_STREAKS, CREATE_MESSAGE } from './types';\nexport const getUserStreaks = () => dispatch => {\n  axios.get('/api/streak').then(res => {\n    dispatch({\n      type: SET_USER_STREAKS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const deleteStreak = streakId => dispatch => {\n  axios.delete(`/api/streak/${streakId}`).then(response => {\n    if (response.data.streakDeleted) {\n      dispatch(getUserStreaks());\n      dispatch({\n        type: CREATE_MESSAGE,\n        payload: {\n          streak: res.data.message\n        }\n      });\n    }\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const createStreak = streakData => dispatch => {\n  if (streakData.streakType === 'individual') {\n    axios.post('/api/streak/individual', streakData).then(response => {\n      if (response.data.streakCreated) {\n        dispatch(getUserStreaks());\n        dispatch({\n          type: CREATE_MESSAGE,\n          payload: {\n            streak: response.data.message\n          }\n        });\n      }\n    }).catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  } else if (streakData.streakType === 'squad') {\n    axios.post('/api/streak/squad', streakData).then(response => {\n      if (response.data.streakCreated) {\n        dispatch(getUserStreaks());\n        dispatch({\n          type: CREATE_MESSAGE,\n          payload: {\n            streak: response.data.message\n          }\n        });\n      }\n    }).catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/adown/apps/squad/client/src/actions/streakActions.js"],"names":["axios","GET_ERRORS","SET_USER_STREAKS","CREATE_MESSAGE","getUserStreaks","dispatch","get","then","res","type","payload","data","catch","err","response","deleteStreak","streakId","delete","streakDeleted","streak","message","createStreak","streakData","streakType","post","streakCreated"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS, SET_USER_STREAKS, CREATE_MESSAGE } from './types';\n\nexport const getUserStreaks = () => dispatch => {\n  axios\n    .get('/api/streak')\n    .then(res => {\n      dispatch({\n        type: SET_USER_STREAKS,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\nexport const deleteStreak = streakId => dispatch => {\n  axios\n    .delete(`/api/streak/${streakId}`)\n    .then(response => {\n      if (response.data.streakDeleted) {\n        dispatch(getUserStreaks());\n        dispatch({\n          type: CREATE_MESSAGE,\n          payload: {\n            streak: res.data.message\n          }\n        });\n      }\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\nexport const createStreak = streakData => dispatch => {\n  if (streakData.streakType === 'individual') {\n    axios\n      .post('/api/streak/individual', streakData)\n      .then(response => {\n        if (response.data.streakCreated) {\n          dispatch(getUserStreaks());\n          dispatch({\n            type: CREATE_MESSAGE,\n            payload: {\n              streak: response.data.message\n            }\n          });\n        }\n      })\n      .catch(err => {\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        });\n      });\n  } else if (streakData.streakType === 'squad') {\n    axios\n      .post('/api/streak/squad', streakData)\n      .then(response => {\n        if (response.data.streakCreated) {\n          dispatch(getUserStreaks());\n          dispatch({\n            type: CREATE_MESSAGE,\n            payload: {\n              streak: response.data.message\n            }\n          });\n        }\n      })\n      .catch(err => {\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        });\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}