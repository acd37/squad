{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwtDecode from 'jwt-decode';\nimport { SET_CURRENT_USER, GET_ERRORS, CREATE_MESSAGE, SET_USER_SQUAD, SET_USER_PROFILE, CLEAR_ERRORS } from './types';\nexport const loginUser = userData => dispatch => {\n  axios.post('/api/auth/login', userData).then(res => {\n    // save token to localStorage\n    const token = res.data.token;\n    localStorage.setItem('squad', token); // set token to auth header\n\n    setAuthToken(token); // decode token to get user data\n\n    const decoded = jwtDecode(token); // set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // register\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/api/user', userData).then(res => {\n    dispatch({\n      type: CREATE_MESSAGE,\n      payload: {\n        registration: 'Account was successfully created.'\n      }\n    });\n    history.push('/');\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // set user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // logout user\n\nexport const logoutUser = () => dispatch => {\n  console.log('here'); // remove token from localStorage\n\n  localStorage.removeItem('squad'); // remove auth header\n\n  setAuthToken(false); // set current user to {}\n\n  dispatch(setCurrentUser({})); // clear errors\n\n  dispatch({\n    type: CLEAR_ERRORS\n  }); // set profile to {}\n\n  dispatch({\n    type: SET_USER_PROFILE,\n    payload: {}\n  }); // set squad to {}\n\n  dispatch({\n    type: SET_USER_SQUAD,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["/Users/adown/apps/squad/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwtDecode","SET_CURRENT_USER","GET_ERRORS","CREATE_MESSAGE","SET_USER_SQUAD","SET_USER_PROFILE","CLEAR_ERRORS","loginUser","userData","dispatch","post","then","res","token","data","localStorage","setItem","decoded","setCurrentUser","catch","err","type","payload","response","registerUser","history","registration","push","logoutUser","console","log","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SACEC,gBADF,EAEEC,UAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,gBALF,EAMEC,YANF,QAOO,SAPP;AASA,OAAO,MAAMC,SAAS,GAAGC,QAAQ,IAAIC,QAAQ,IAAI;AAC/CX,EAAAA,KAAK,CACFY,IADH,CACQ,iBADR,EAC2BF,QAD3B,EAEGG,IAFH,CAEQC,GAAG,IAAI;AACX;AADW,UAEHC,KAFG,GAEOD,GAAG,CAACE,IAFX,CAEHD,KAFG;AAGXE,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B,EAHW,CAKX;;AACAd,IAAAA,YAAY,CAACc,KAAD,CAAZ,CANW,CAQX;;AACA,UAAMI,OAAO,GAAGjB,SAAS,CAACa,KAAD,CAAzB,CATW,CAWX;;AACAJ,IAAAA,QAAQ,CAACS,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAfH,EAgBGE,KAhBH,CAgBSC,GAAG,IAAI;AACZX,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEnB,UADC;AAEPoB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFf,KAAD,CAAR;AAID,GArBH;AAsBD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMU,YAAY,GAAG,CAAChB,QAAD,EAAWiB,OAAX,KAAuBhB,QAAQ,IAAI;AAC7DX,EAAAA,KAAK,CACFY,IADH,CACQ,WADR,EACqBF,QADrB,EAEGG,IAFH,CAEQC,GAAG,IAAI;AACXH,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAElB,cADC;AAEPmB,MAAAA,OAAO,EAAE;AACPI,QAAAA,YAAY,EAAE;AADP;AAFF,KAAD,CAAR;AAMAD,IAAAA,OAAO,CAACE,IAAR,CAAa,GAAb;AACD,GAVH,EAWGR,KAXH,CAWSC,GAAG,IAAI;AACZX,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEnB,UADC;AAEPoB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFf,KAAD,CAAR;AAID,GAhBH;AAiBD,CAlBM,C,CAoBP;;AACA,OAAO,MAAMI,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLI,IAAAA,IAAI,EAAEpB,gBADD;AAELqB,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMW,UAAU,GAAG,MAAMnB,QAAQ,IAAI;AAC1CoB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAD0C,CAE1C;;AACAf,EAAAA,YAAY,CAACgB,UAAb,CAAwB,OAAxB,EAH0C,CAK1C;;AACAhC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAN0C,CAQ1C;;AACAU,EAAAA,QAAQ,CAACS,cAAc,CAAC,EAAD,CAAf,CAAR,CAT0C,CAW1C;;AACAT,EAAAA,QAAQ,CAAC;AACPY,IAAAA,IAAI,EAAEf;AADC,GAAD,CAAR,CAZ0C,CAgB1C;;AACAG,EAAAA,QAAQ,CAAC;AACPY,IAAAA,IAAI,EAAEhB,gBADC;AAEPiB,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR,CAjB0C,CAsB1C;;AACAb,EAAAA,QAAQ,CAAC;AACPY,IAAAA,IAAI,EAAEjB,cADC;AAEPkB,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR;AAID,CA3BM","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwtDecode from 'jwt-decode';\n\nimport {\n  SET_CURRENT_USER,\n  GET_ERRORS,\n  CREATE_MESSAGE,\n  SET_USER_SQUAD,\n  SET_USER_PROFILE,\n  CLEAR_ERRORS\n} from './types';\n\nexport const loginUser = userData => dispatch => {\n  axios\n    .post('/api/auth/login', userData)\n    .then(res => {\n      // save token to localStorage\n      const { token } = res.data;\n      localStorage.setItem('squad', token);\n\n      // set token to auth header\n      setAuthToken(token);\n\n      // decode token to get user data\n      const decoded = jwtDecode(token);\n\n      // set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\n// register\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post('/api/user', userData)\n    .then(res => {\n      dispatch({\n        type: CREATE_MESSAGE,\n        payload: {\n          registration: 'Account was successfully created.'\n        }\n      });\n      history.push('/');\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\n// set user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// logout user\nexport const logoutUser = () => dispatch => {\n  console.log('here');\n  // remove token from localStorage\n  localStorage.removeItem('squad');\n\n  // remove auth header\n  setAuthToken(false);\n\n  // set current user to {}\n  dispatch(setCurrentUser({}));\n\n  // clear errors\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n\n  // set profile to {}\n  dispatch({\n    type: SET_USER_PROFILE,\n    payload: {}\n  });\n\n  // set squad to {}\n  dispatch({\n    type: SET_USER_SQUAD,\n    payload: {}\n  });\n};\n"]},"metadata":{},"sourceType":"module"}